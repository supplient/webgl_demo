* 支持透明
* 试试FBO
    * 实现景深
    * 研究反走样
* 研究下由64x64的凹凸纹理生成63x63的法线纹理后怎么处理比较好
    * 现在这样直接填充一行一列看起来效果很差
    * 应该要用滤波方法会比较好
* 绘制影子
    * 然后真正地实现一次投影仪
    * 做一个demo，包含一近两远、一小两大三个物体，一个投影仪光源
        * 先试试多物体渲染
        * 然后试试用用FBO，在一个FBO里面渲染一个骰子，然后渲染到一个面上
        * 摆个一大一小两个物体的场景
        * 先试试光源就在屏幕中央的，也就是屏幕坐标等于纹理坐标的。
            * 绘制深度帧，绘制投影
            * 注意这里因为我图省事了，所以深度帧和屏幕帧（就是正常绘制的时候）要使用相同的投影矩阵
        * 再试试光源不随镜头移动的，也就是纹理坐标需要计算才能得到的 <= Here
        * 研究一下精度问题，现在深度偏移也太大了 <= Here
        * 再加一块板，它在一大一小之间，挡住一半大的
    * 投影的逻辑
        * 先把镜头转到投影光源处，设以光源方向为法向量的过光源位置的平面为光源平面。
        * 绘制一个深度帧到FBO里面，将这一帧使用的框称为投影区域
            * 如果是正投影的话，那投影区域就是一个固定大小的矩阵
            * 如果是透视投影的话，那投影区域就是一个会根据到光源平面的距离而变化的矩阵
        * 再把镜头转到摄像机处，进行逐片元绘制
            * 首先计算每个片元在投影区域中的位置，也就是获得在之前拍的深度帧内的纹理坐标(u, v)
            * 根据该纹理坐标提取出深度帧内存的深度信息z
            * 计算该片元到光源平面的距离d
            * 若z<d，说明该片元被遮挡，所以不计算diffuse和specular
            * 若z>=d，说明该片元被光源照射，根据之前算出来的的(u, v)，提取出投影纹理，计算diffuse和specular

做完了的：
* 支持凹凸贴图
* 研究怎么让纹理不跟随旋转
    * 也就是说纹理看起来像投影仪打光打上去的一样，物体旋转它也不跟着旋转